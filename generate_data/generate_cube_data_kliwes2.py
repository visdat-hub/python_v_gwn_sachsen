## @package Generator for application data of GWN viewer
#
# Usage
# ----------
# cd /mnt/visdat/Projekte/2020/GWN Viewer/dev/python/generate_data/
#
# kliwes
# -------
# python3 generate_data.py  -src_folder /mnt/visdat/Projekte/2020/GWN\ viewer/daten/restructured/kliwes/0/ -dst_folder /var/rosi_data/daten_stb/gwn_sachsen/ -data_type kliwes -scenario_id 0 -level_id 1 -area_id 12 -max_year 1961
#
# difga
# -------
# python3 generate_data.py  -src_folder /mnt/visdat/Projekte/2020/GWN\ viewer/daten/restructured/difga/ -dst_folder /var/rosi_data/daten_stb/gwn_sachsen/ -data_type difga -scenario_id 1 -level_id 1 -area_id 12 -max_year 1961
#
# raklida_messungen
# -------
# python3 generate_data.py  -src_folder /mnt/visdat/Projekte/2020/GWN\ viewer/daten/Raklida\ Messungen/ -dst_folder /var/rosi_data/daten_stb/gwn_sachsen/ -data_type raklida_messungen -scenario_id 2 -level_id 1 -area_id 12 -max_year 1961
#
# raklida_referenz
# -------
# python3 generate_data.py  -src_folder /mnt/visdat/Projekte/2020/GWN\ viewer/daten/Raklida\ Referenz/ -dst_folder /var/rosi_data/daten_stb/gwn_sachsen/ -data_type raklida_referenz -scenario_id 2 -level_id 1 -area_id 12 -max_year 1961
#
# raklida_wettreg66
# -------
# python3 generate_data.py  -src_folder /mnt/visdat/Projekte/2020/GWN\ viewer/daten/Raklida\ Wettreg\ 66/ -dst_folder /var/rosi_data/daten_stb/gwn_sachsen/ -data_type raklida_wettreg66 -scenario_id 2 -level_id 1 -area_id 12 -max_year 1961
#
# stoffbilanz
# -------
# python3 generate_data.py  -src_folder /mnt/visdat/Projekte/2020/GWN\ viewer/daten/restructured/stoffbilanz/ -dst_folder /var/rosi_data/daten_stb/gwn_sachsen/ -data_type stoffbilanz -scenario_id 5 -level_id 1 -area_id 12 -max_year 1961
#
# Command line arguments
# ----------
# - src_folder : string, folder of h5 parameter data generated by create_import_structure
# - dst_folder : string, destination folder for *.h5 files and folder of difga area data (netcdf)
# - data_type : string, kliwes, difga, raklida_messungen, raklida_referenz, raklida_wettreg66
# - scneario_id : integer, scenario identifier
# - level_id : integer, level identifier to set spatial resolution
#   - level 1 : 100m
#   - level 2 : 50m
#   - level 3 : 25m
# - area_id : integers, area identifier of kliwes dataset
# - max_year: integer, limit count of years to import for test purposes

import sys
import os
from kliwes2_25 import kliwes2_25_generator
from kliwes2_100 import kliwes2_100_generator

## @brief Get command line arguments.
#
# @returns args Array of arguments
def get_arguments():
    print("--> get caller arguments")
    args = {
        'src_folder' : None,
        'dst_folder' : None,
        'data_type' : None,
        'scenario_id' : None,
        'level_id' : None,
        'area_id' : None,
        'param_id' : None
    }

    i = 1
    while i < len(sys.argv):
        arg = sys.argv[i]
        if arg == '-src_folder':
            i = i + 1
            args['src_folder'] = sys.argv[i]
        elif arg == '-dst_folder':
            i = i + 1
            args['dst_folder'] = sys.argv[i]
        elif arg == '-data_type':
            i = i + 1
            args['data_type'] = sys.argv[i]
        elif arg == '-scenario_id':
            i = i + 1
            args['scenario_id'] = sys.argv[i]
        elif arg == '-level_id':
            i = i + 1
            args['level_id'] = sys.argv[i]
        elif arg == '-area_id':
            i = i + 1
            args['area_id'] = sys.argv[i]
        elif arg == '-param_id':
            i = i + 1
            args['param_id'] = sys.argv[i]
        i = i + 1

    for p in args:
        if args[p] == None:
            print("ERROR: arguments of program call missing --> ", p)
            sys.exit()

    return args


## @brief Check if folder exists
#
# @param folder_list, list of folders to check
def check_folder(folder_list):
    print('--> check folders')
    for f in folder_list:
        if not os.path.exists(f):
            sys.exit('ERROR: folder not exists --> ' + f)
        else:
            print('OK, folder found --> ', f)

def unlink_maps(self, phath):
    for folder, subfolder, file in os.walk(phath):
        for filename in file:
            if filename.endswith(".int32.2.h5"):

                print(folder,filename)
                os.unlink(os.path.join(folder,filename))

## @brief Example program to generate data for the GWN Viewer
if __name__ ==  '__main__':
    """ start program """

    # get command line arguments
    args = get_arguments()

    # check if folder exists
    check_folder([args['src_folder'], args['dst_folder']])

    #unlink_maps(args['dst_folder'])

    # kliwes data import
    if args['data_type'] == 'kliwes2_25':
        
        kliwes = kliwes2_25_generator(args)
        # get areas
        area_ds, x, y = kliwes.get_area()
        # create parameter datasets
        #kliwes.create_parameter(area_ds)
        # create yearly parameter datasets for all scenarios
        kliwes.create_parameter_by_scenarios(area_ds, x, y)
        
    # kliwes data import
    if args['data_type'] == 'kliwes2_100':
        
        kliwes = kliwes2_100_generator(args)
        # get areas
        area_ds, x, y = kliwes.get_area()
        # create parameter datasets
        #kliwes.create_parameter(area_ds)
        # create yearly parameter datasets for all scenarios
        kliwes.create_parameter_by_scenarios(area_ds, x, y)